// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: notification_api.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationAPIServiceClient is the client API for NotificationAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationAPIServiceClient interface {
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error)
}

type notificationAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationAPIServiceClient(cc grpc.ClientConnInterface) NotificationAPIServiceClient {
	return &notificationAPIServiceClient{cc}
}

func (c *notificationAPIServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error) {
	out := new(CreateNotificationResponse)
	err := c.cc.Invoke(ctx, "/notifications.v1alpha1.NotificationAPIService/CreateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationAPIServiceServer is the server API for NotificationAPIService service.
// All implementations must embed UnimplementedNotificationAPIServiceServer
// for forward compatibility
type NotificationAPIServiceServer interface {
	CreateNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error)
	mustEmbedUnimplementedNotificationAPIServiceServer()
}

// UnimplementedNotificationAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationAPIServiceServer struct {
}

func (UnimplementedNotificationAPIServiceServer) CreateNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedNotificationAPIServiceServer) mustEmbedUnimplementedNotificationAPIServiceServer() {
}

// UnsafeNotificationAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationAPIServiceServer will
// result in compilation errors.
type UnsafeNotificationAPIServiceServer interface {
	mustEmbedUnimplementedNotificationAPIServiceServer()
}

func RegisterNotificationAPIServiceServer(s grpc.ServiceRegistrar, srv NotificationAPIServiceServer) {
	s.RegisterService(&NotificationAPIService_ServiceDesc, srv)
}

func _NotificationAPIService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationAPIServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifications.v1alpha1.NotificationAPIService/CreateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationAPIServiceServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationAPIService_ServiceDesc is the grpc.ServiceDesc for NotificationAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifications.v1alpha1.NotificationAPIService",
	HandlerType: (*NotificationAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotification",
			Handler:    _NotificationAPIService_CreateNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification_api.proto",
}
